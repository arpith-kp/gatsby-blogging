{"componentChunkName":"component---src-layouts-blog-post-js","path":"/blog/2018/01/10/fernando-de-noronha","result":{"data":{"markdownRemark":{"html":"<p>Plan ahead if you want to visit Fernando de Noronha, an archipelago of 21 islands and islets in the Atlantic Ocean. To protect these fragile islands, only 460 tourists are allowed to visit these unspoiled beauties per day. And you’ll definitely want to include Fernando de Noronha on your itinerary if you can. Conde Nast called this archipelago “possibly the most relaxing and most beautiful place” in the world. And the New York Times included Fernando de Noronha on its 2014 list of must-visit destinations. This high praise is well deserved. The waters around Fernando de Noronha are crystal clear and teeming with fish, dolphins and turtles, making them perfect for snorkeling and diving. You’ll also find plenty of lovely, deserted beaches, pretty coves and lovely waterfalls on these very special and very exclusive islands.</p>\n<p>Image credits: <a href=\"https://www.touropia.com/islands-in-brazil/\">touropia.com</a></p>\n<p><a href=\"https://www.touropia.com/islands-in-brazil/\">Original content</a></p>","frontmatter":{"title":"Fernando de Noronha","date":"January 10, 2018","author":"admin","category":["Pernanbuco","Nordeste","Favorite"]}}},"pageContext":{"slug":"/blog/2018/01/10/fernando-de-noronha","prev":{"node":{"html":"<h1>Build GraphQL APIs using Node.</h1>\n\n        <div class=\"gatsby-code-title\">\n          <span>package.json</span>\n        </div>\n       \n<p>In this article, you will learn about GraphQL and building APIs with GraphQL using Node.</p>\n<h2>What is GraphQL</h2>\n<ul>\n<li>\n<p>A query language service that sits between frontend and backend abstracting how multiple frontend client applications interacting with multiple server applications.</p>\n<p align=\"center\">  <img width=\"400\" height=\"200\" src=\"https://drive.google.com/uc?export=view&amp;id=1oqb7WAtEzHVOvkYMmJXH6OVW8xqAYiaj\">  </p>\n</li>\n</ul>\n<h2>Why we should use GraphQL over Rest API</h2>\n<p>Imagine we have UI who wants to query <strong><em>User</em></strong> information like name, email, last purchased items, and recommended items. </p>\n<ul>\n<li>A typical Rest requests involves multiple API calls between client and server:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"> 1. Get User Information: \n  /api/v1/users?id=XYZ\n  {   name: ABC, email: abc@gmail.com, purchase_user_id: 123, recommended_user_item: 456   }\n     \n 2. Get Purchase Items:\n   /api/v1/purchases?purchase_user_id=123\n   { &lt;Purchase Items&gt; } \n   \n3. Get Recommended Items:\n  /api/v1/recommendations?recommended_user_itme=456\n  { &lt;Recommended Items&gt; }</code></pre></div>\n<ul>\n<li>With GraphQL same results can be achieved in a single request. We will be learning about how to write such queries in the next modules</li>\n</ul>\n<p>This will eventually save request/response time, no over/under data fetched and the size of the payload reduces significantly.</p>\n<h2>GraphQL Editor</h2>\n<p>There are many GraphQL editors which provide an in-browser playground to interact with GraphQL queries. Here are some of few good editors you could try </p>\n<ul>\n<li><a href=\"https://support.insomnia.rest/article/156-installation\">Insomnia</a>: Similar to Postman Rest Client</li>\n<li><a href=\"https://graphql.org/swapi-graphql\">GraphiQL</a>: An In-browser editor</li>\n</ul>\n<p>We will be using GraphiQL available online to learn GraphQL basics and later in the article we will use the same editor locally with our React application. </p>\n<p>GraphIQL has four main component </p>\n<ol>\n<li>Workspace area to write our queries.</li>\n<li>Query Variables area to pass any user input arguments to be used in queries.</li>\n<li>Output area to view results.</li>\n<li>Documentation area which shows available fields and their types we can query on.</li>\n</ol>\n<p align=\"center\">  <img width=\"800\" height=\"400\" src=\"https://drive.google.com/uc?export=view&amp;id=16LDWfphbmjPF1ZsJi67R1jbOzX9rpNB-\">  </p>\n<h2>GraphQL Basics</h2>\n<p>We will learn the below concepts in GraphQL using the <a href=\"https://graphql.org/swapi-graphql\">Star Wars GraphQL schema</a>. </p>\n<ul>\n<li><a href=\"#fields\">Fields</a></li>\n<li><a href=\"#variables\">Variables</a></li>\n<li><a href=\"#arguments\">Arguments</a></li>\n<li><a href=\"#directives\">Directives</a></li>\n<li><a href=\"#aliases\">Aliases</a></li>\n<li><a href=\"#fragments\">Fragments</a></li>\n<li><a href=\"#mutations\">Mutations</a></li>\n<li><a href=\"#interfaces\">Interfaces</a></li>\n</ul>\n<p>For our understanding, we will be using the following example <strong>(A)</strong> query.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">query GetAllFilms<span class=\"token punctuation\">{</span>\n  allFilms(last<span class=\"token operator\">:</span><span class=\"token number\">3</span>) <span class=\"token punctuation\">{</span>\n    films <span class=\"token punctuation\">{</span>\n      title\n      episodeID\n      openingCrawl\n      director\n      producers\n      releaseDate\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Fields</h3>\n<p>GraphQL is all about asking for specific fields of an object. It could be a simple scalar field or complex type.</p>\n<p>In our example <strong>(A)</strong> some of the Scalar fields are <em>title, episodeID</em> and Complex type are <em>allFilms, films</em>.</p>\n<h3>Arguments</h3>\n<p>GraphQL has the ability to pass arguments to fields. But unlike REST every field and nested object can have its own set of arguments, avoiding multiple API fetches.</p>\n<p>In our example  <strong>(A)</strong> <em>last</em> 3 tells us we are only interested in the last 3 films with mentioned fields.</p>\n<h3>Aliases</h3>\n<p>If we need to query the same field with different arguments, aliases help us to rename the result of a field to anything we want.</p>\n<p>In the example below, <strong><em>alias</em></strong> <em>filmA</em> and <em>filmB</em> are used to differentiate between film names.</p>\n<blockquote>\n<p><strong>Input</strong></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n  filmA: film<span class=\"token punctuation\">(</span>id: <span class=\"token string\">\"ZmlsbXM6NA==\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    titleA: title\n  <span class=\"token punctuation\">}</span>\n  filmB: film<span class=\"token punctuation\">(</span>id: <span class=\"token string\">\"ZmlsbXM6NQ==\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    titleB: title\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><strong>Output</strong></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"fileA\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"titleA\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"The Phantom Menace\"</span>\n    <span class=\"token punctuation\">}</span>,\n    <span class=\"token string\">\"fileB\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"titleB\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Attack of the Clones\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example, we used the same field film with multiple arguments and used aliases to differentiate the results</p>\n<h3>Fragments</h3>\n<p>Fragments let you reuse repetitive fields by separating out into smaller chunks and reuse them in multiple queries.</p>\n<p>In the example below, we separated out common fields as fragments and reused them in queries using\n... &#x3C; FragmentName>.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  filmA<span class=\"token operator\">:</span> film(id<span class=\"token operator\">:</span> <span class=\"token string\">\"ZmlsbXM6NA==\"</span>) <span class=\"token punctuation\">{</span>\n    ...metaData\n  <span class=\"token punctuation\">}</span>\n  filmB<span class=\"token operator\">:</span> film(id<span class=\"token operator\">:</span> <span class=\"token string\">\"ZmlsbXM6NQ==\"</span>) <span class=\"token punctuation\">{</span>\n    ...metaData\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nfragment metaData on Film <span class=\"token punctuation\">{</span>\n  episodeID\n  openingCrawl\n  director\n  producers\n  releaseDate\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Variables</h3>\n<p>We can pass dynamic values as arguments to fields.  GraphQL factors dynamic values out of the query and passes them as a dictionary. </p>\n<p>Now instead of hardcoding values within a query, we can reuse the query by making it generic to receive value from the variable. Since GraphQL is strongly typed, we must provide the type of input variable which should match its original field type we are querying on. Type <strong>String!</strong> indicates that input is a required variable marked by <strong><em>!</em></strong> symbol.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// Instead of hardcoding in query:</span>\n\nquery FilmQuery<span class=\"token punctuation\">{</span>\n  filmA<span class=\"token operator\">:</span> film(id<span class=\"token operator\">:</span> <span class=\"token string\">\"ZmlsbXM6NA==\"</span>) <span class=\"token punctuation\">{</span>\n    titleA<span class=\"token operator\">:</span> title\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Replace it as follows:</span>\n\nquery FilmQuery($filmid<span class=\"token operator\">:</span> ID!)<span class=\"token punctuation\">{</span>\n  filmA<span class=\"token operator\">:</span> film(id<span class=\"token operator\">:</span> $filmid) <span class=\"token punctuation\">{</span>\n    titleA<span class=\"token operator\">:</span> title\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// In Query Variable section we can pass value to filmid as:</span>\n\n<span class=\"token punctuation\">{</span>\n   <span class=\"token property\">\"filmid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ZmlsbXM6NA==\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Directives</h3>\n<p>Imagine we want to render a portion of the component in the UI based on certain conditions in the query, directive comes in handy in this place where we can alter GraphQL runtime execution and commonly used with variables. Built-in directives supported by the GraphQL server are <strong>@include</strong>  and <strong>@skip</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">query FilmConnectionsQuery($filmid<span class=\"token operator\">:</span> ID!<span class=\"token punctuation\">,</span> $withVehicle<span class=\"token operator\">:</span> Boolean!) <span class=\"token punctuation\">{</span>\n  film(id<span class=\"token operator\">:</span> $filmid) <span class=\"token punctuation\">{</span>\n    title\n    vehicleConnection @include(if<span class=\"token operator\">:</span> $withVehicle) <span class=\"token punctuation\">{</span>\n      vehicles <span class=\"token punctuation\">{</span>\n        name\n        model\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Query Input</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"filmid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ZmlsbXM6NA==\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"withVehicle\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Based on condition withVehicle true/false, </span>\n<span class=\"token comment\">// we get a response back including/excluding vehicle info.</span>\n\n<span class=\"token comment\">// With vehicle</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"film\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The Phantom Menace\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"vehicleConnection\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"vehicles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Vulture Droid\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"model\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Vulture-class droid starfighter\"</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>...          \n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Without the vehicle</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"film\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"The Phantom Menace\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Mutations</h3>\n<p>Operations that cause write (create, update and delete) data on the server side should be sent explicitly as mutations in GraphQL. </p>\n<p>Currently, mutation is not supported in our demo playground API but we will learn more about it in the demo applications we will build.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">mutation addFilm($title<span class=\"token operator\">:</span> String!<span class=\"token punctuation\">,</span> $episodeId<span class=\"token operator\">:</span> Int!) <span class=\"token punctuation\">{</span>\n  addFilm(title<span class=\"token operator\">:</span> $title<span class=\"token punctuation\">,</span> episodeId<span class=\"token operator\">:</span> $episodeId) <span class=\"token punctuation\">{</span>\n    eposideId\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Interfaces</h3>\n<p>An interface is an abstract type that includes a predefined set of fields that a type must include to implement an interface.</p>\n<p>Currently mutation is not supported in our demo playground API but we will learn more about it in demo applications we will build.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">interface Character <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> ID!\n  name<span class=\"token operator\">:</span> String!\n  films<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Film<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ntype Human implements Character <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> ID!\n  name<span class=\"token operator\">:</span> String!\n  persons<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Film<span class=\"token punctuation\">]</span>\n  totalCount<span class=\"token operator\">:</span> Int\n<span class=\"token punctuation\">}</span>\n\n\nquery HeroForEpisode($personid<span class=\"token operator\">:</span> ID!) <span class=\"token punctuation\">{</span>\n  person(personID<span class=\"token operator\">:</span> $personid) <span class=\"token punctuation\">{</span>\n    name\n    ... on Human <span class=\"token punctuation\">{</span>\n      persons\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>Designing GraphQL Schemas</h1>\n<p>Each of the next subsections is mapped to branches in the <a href=\"https://github.com/arpith-kp/blogging-graphql.git\">Blogging-GraphQL</a> repo starting with <strong>tut-02</strong>, you can checkout each branch and compare it with your version to see if everything is working as expected.</p>\n<h2>Setup Environment</h2>\n<p>Ensure you have installed <a href=\"https://nodejs.org/tr/download/package-manager/#macos\">NodeJs</a>, <a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/\">MongoDb</a>, <a href=\"https://formulae.brew.sh/formula/postgresql\">Postgresql</a>. If you are on Mac, you can install them easily using.</p>\n<ul>\n<li>\n<p>brew install node. </p>\n<ul>\n<li>\n<p>Test you have installed by running </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node -v and <span class=\"token function\">npm</span> -v</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>brew tap mongodb/brew, brew install mongodb-community@4.4</p>\n<ul>\n<li>Test you have installed by running <code class=\"language-text\">mongd</code></li>\n</ul>\n</li>\n<li>\n<p>brew install postgresql</p>\n<ul>\n<li>Test you have installed by running <code class=\"language-text\">psql</code></li>\n</ul>\n</li>\n</ul>\n<h2>Load Test Data</h2>\n<ul>\n<li>Install predefined dependencies using <strong>npm i</strong> . </li>\n<li>\n<p>Once installation completes run scripts <em>loadPgData.sql</em> and <em>loadMongoData.js</em> to load test data.\n<br/> -- From CLI you can load data to Postgres as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ createdb blogging\n$ psql blogging <span class=\"token operator\">&lt;</span> loadPgData.sql</code></pre></div>\n</li>\n<li>\n<p>ER Diagram for Postgres DB tables</p>\n<p align=\"center\">  <img width=\"500\" height=\"400\" src=\"https://drive.google.com/uc?export=view&amp;id=1goykJL1p-ZsfwhoOWMRqHgMOSNUJM82f\">  </p>\n</li>\n</ul>\n<h2>Developing GraphQL Schema</h2>\n<h3>Designing simple HelloWorld Schema( Branch <a href=\"https://github.com/arpith-kp/blogging-graphql/tree/tut-03\">tut-03</a>)</h3>\n<p>To begin let's design a simple HelloWorld Schema. Detailed descriptions of various types we are about to use are in GraphQL JS <a href=\"https://graphql.org/graphql-js/type/\">docs</a>, take a look at it before starting designing schema.</p>\n<p>Final folder structure of this tutorials looks as follows.</p>\n<p align=\"left\">  <img width=\"200\" height=\"400\" src=\"https://drive.google.com/uc?export=view&amp;id=1I6ANbR5qU5TS_1NtGXWfFo7ANhNHfBcx\">  </p>\n<p>Let's create our root schema in <em>index.js</em> inside <em>schema</em> directory. Each field has a type and resolver function attached to it.</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>src/schema/index.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Import helpers</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  GraphQLSchema<span class=\"token punctuation\">,</span>\n  GraphQLObjectType<span class=\"token punctuation\">,</span>\n  GraphQLString<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Root Query type is your starting point in data graph</span>\n<span class=\"token keyword\">const</span> RootQueryType <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'RootQueryType'</span><span class=\"token punctuation\">,</span>\n\n  fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    hello<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> GraphQLString<span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> nsSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  query<span class=\"token operator\">:</span> RootQueryType<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> nsSchema<span class=\"token punctuation\">;</span></code></pre></div>\n\n        <div class=\"gatsby-code-title\">\n          <span>src/index.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>nodeEnv<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib/util'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Running in </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>nodeEnv<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> mode...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Query argument</span>\n<span class=\"token keyword\">const</span> queryArg <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ncSchema <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./schema'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>graphql<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Execute the query with our Schema</span>\n<span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span>ncSchema<span class=\"token punctuation\">,</span> queryArg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Run index.js script and see if we are getting the expected result.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node lib/index.js <span class=\"token punctuation\">{</span>hello<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<h3>Extending Runtime with Express Server (Branch <a href=\"https://github.com/arpith-kp/blogging-graphql/tree/tut-04\">tut-04</a>)</h3>\n<ul>\n<li>\n<p>Install the following dependencies to integrate our application with Express.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.14.0\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"express-graphql\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.5.3\"</span></code></pre></div>\n</li>\n<li>Modify <em>lib/index.js</em> to an accept connection on port 3000 and you can now start executing your GraphQL queries with embedded GraphIQl IDE.</li>\n</ul>\n\n        <div class=\"gatsby-code-title\">\n          <span>lib/index.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ncSchema <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../schema'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> graphqlHTTP <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express-graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Execute the query</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/graphql'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">graphqlHTTP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  schema<span class=\"token operator\">:</span> ncSchema<span class=\"token punctuation\">,</span>\n  graphiql<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server is listening on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Building Custom GraphQL Types(Branch <a href=\"https://github.com/arpith-kp/blogging-graphql/tree/tut-05\">tut-05</a>)</h3>\n<p>Let's start building custom types to query a single user email based on token ID. Our GraphQL query we are trying to build looks like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  user(token<span class=\"token operator\">:</span> <span class=\"token string\">\"2222\"</span>)<span class=\"token punctuation\">{</span>\n    email\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>First, let's add custom <em>UserType</em> under <em>schema/types</em> to accept input fields</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>schema/types/user.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  GraphQLObjectType<span class=\"token punctuation\">,</span>\n  GraphQLID<span class=\"token punctuation\">,</span>\n  GraphQLString<span class=\"token punctuation\">,</span>\n  GraphQLNonNull<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'UserType'</span><span class=\"token punctuation\">,</span>\n\n  fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> GraphQLID<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLNonNull</span><span class=\"token punctuation\">(</span>GraphQLString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Let's modify our <em>schema/index.js</em> to accept custom type as follows:</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>schema/index.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Import helpers</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  GraphQLSchema<span class=\"token punctuation\">,</span>\n  GraphQLObjectType<span class=\"token punctuation\">,</span>\n  GraphQLString<span class=\"token punctuation\">,</span>\n  GraphQLNonNull<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> UserType <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./types/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pgdb <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../db/pgdb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Root Query type is your starting point in data graph</span>\n<span class=\"token keyword\">const</span> RootQueryType <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'RootQueryType'</span><span class=\"token punctuation\">,</span>\n\n  fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> UserType<span class=\"token punctuation\">,</span>\n      description<span class=\"token operator\">:</span> <span class=\"token string\">'Current user identified by token id'</span><span class=\"token punctuation\">,</span>\n      args<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        token<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLNonNull</span><span class=\"token punctuation\">(</span>GraphQLString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>pgPool<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Read from Postgres DB</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">pgdb</span><span class=\"token punctuation\">(</span>pgPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> nsSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  query<span class=\"token operator\">:</span> RootQueryType<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> nsSchema<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Change our root <em>index.js</em> to redirect query based on custom type.</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>lib.index.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pgp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pg-promise'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> connectString <span class=\"token operator\">=</span> <span class=\"token string\">'postgres://localhost:5432/blogging'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ndb<span class=\"token punctuation\">.</span>conn <span class=\"token operator\">=</span> <span class=\"token function\">pgp</span><span class=\"token punctuation\">(</span>connectString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pgPool <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ncSchema <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../schema'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> graphqlHTTP <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express-graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Execute the query</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/graphql'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">graphqlHTTP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  schema<span class=\"token operator\">:</span> ncSchema<span class=\"token punctuation\">,</span>\n  graphiql<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  context<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>pgPool<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server is listening on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Finally, handle query with database in <em>db/pgdb.js</em></p>\n\n        <div class=\"gatsby-code-title\">\n          <span>db/pgdb.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pgPool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tokenId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> pgPool<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n          select * from users\n          where token_id = $1\n        </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>tokenId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">[</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Mapping CamelCase Field Variables In Query With SnakeCase Columns In DB</h3>\n<p>Let's say we want to query on additional fields in User such as firstName and lastName, if we run our query like this we will get a response back as null as the server doesn't know how to map columns in DB.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// Query: </span>\n<span class=\"token punctuation\">{</span>\n  user(token<span class=\"token operator\">:</span> <span class=\"token string\">\"2222\"</span>)<span class=\"token punctuation\">{</span>\n    email\n    firstName\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Response</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"arpith@gmail.com\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"firstName\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To handle such scenarios we can use library <em>humps</em> (new dependencies are added in <em>package.json</em>) to camelize column names. Let's change  <em>db/pgdb.js</em>.</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>db/pgdb.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> humps <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'humps'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pgPool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tokenId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> pgPool<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n          select * from users\n          where token_id = $1\n        </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>tokenId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> humps<span class=\"token punctuation\">.</span><span class=\"token function\">camelizeKeys</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Modeling 1:N Relationships</h3>\n<p>Let's say we want to get all the posts a user has written. This kind of querying typically involves more than two tables.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">query userPostsQuery<span class=\"token punctuation\">{</span>\n  user(token<span class=\"token operator\">:</span><span class=\"token string\">\"1111\"</span>)<span class=\"token punctuation\">{</span>\n    lastName\n    email\n    createdAt\n    posts<span class=\"token punctuation\">{</span>\n     title\n     content\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>From the above query it's clear we should add <em>posts</em> field to <em>UserType</em> in <em>schema/types/user.js</em></p>\n\n        <div class=\"gatsby-code-title\">\n          <span>schema/types/user.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  GraphQLObjectType<span class=\"token punctuation\">,</span>\n  GraphQLID<span class=\"token punctuation\">,</span>\n  GraphQLString<span class=\"token punctuation\">,</span>\n  GraphQLNonNull<span class=\"token punctuation\">,</span>\n  GraphQLList<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> pgdb <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../../db/pgdb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> PostType <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./post'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'UserType'</span><span class=\"token punctuation\">,</span>\n\n  fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> GraphQLID<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    firstName<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> GraphQLString<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    lastName<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> GraphQLString<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLNonNull</span><span class=\"token punctuation\">(</span>GraphQLString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    createdAt<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> GraphQLString<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    posts<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLList</span><span class=\"token punctuation\">(</span>PostType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>pgPool<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">pgdb</span><span class=\"token punctuation\">(</span>pgPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPosts</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Since <em>posts</em> field is of custom type, let's define it under <em>schema/types/post.js</em>.</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>schema/types/post.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  GraphQLObjectType<span class=\"token punctuation\">,</span>\n  GraphQLID<span class=\"token punctuation\">,</span>\n  GraphQLString<span class=\"token punctuation\">,</span>\n  GraphQLNonNull<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graphql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'PostType'</span><span class=\"token punctuation\">,</span>\n\n  fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> GraphQLID<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    title<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLNonNull</span><span class=\"token punctuation\">(</span>GraphQLString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    createdAt<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLNonNull</span><span class=\"token punctuation\">(</span>GraphQLString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    updatedAt<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLNonNull</span><span class=\"token punctuation\">(</span>GraphQLString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    content<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLNonNull</span><span class=\"token punctuation\">(</span>GraphQLString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Finally, add support query <em>getPosts</em> in <em>db/pgdb.js</em> to fetch data from DB.</p>\n\n        <div class=\"gatsby-code-title\">\n          <span>db/pgdb.js</span>\n        </div>\n       \n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> humps <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'humps'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pgPool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tokenId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> pgPool<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n          select * from users\n          where token_id = $1\n        </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>tokenId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> humps<span class=\"token punctuation\">.</span><span class=\"token function\">camelizeKeys</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">getPosts</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> pgPool<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        select * from posts\n        where author_id=$1\n        </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> humps<span class=\"token punctuation\">.</span><span class=\"token function\">camelizeKeys</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Summary</h2>\n<p>Congratulations, you have reached the end of the Node GraphQL's tutorial. Here you learned about using Node library for developing GraphQL Server.</p>\n<p>We have been able to implement a simple BlogPost application and played around implementing various queries. You have learned the benefits of GraphQL on how the client and server can communicate effectively with fewer calls. </p>\n<p>If you want to learn more about GraphQL, here are some of the links.</p>\n<ul>\n<li><a href=\"https://www.howtographql.com/\">How To GraphQL</a> - The Fullstack Tutorial for GraphQL</li>\n<li><a href=\"https://www.pluralsight.com/courses/graphql-scalable-apis\">Building Scalable APIs with GraphQL</a> - Video tutorial on GraphQL. This tutorial is inspired by it.</li>\n</ul>\n<p>For any feedback, you can reach out at my <a href=\"arpithkp.dev@gmail.com\">email</a>.</p>","fields":{"slug":"/blog/2021/03/30/graphql_node/graphql_with_node"},"frontmatter":{"title":"GraphQl with Node","date":"2021-03-30T00:00:00.000Z","author":"admin","category":["GraphQl","Node"],"featured":false}}}}},"staticQueryHashes":["2691016790","63159454"]}